# Generated by Django 4.2.7 on 2025-08-02 05:44

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Required. Enter a valid email address.', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email address')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('tenant_admin', 'Tenant Admin'), ('user', 'User')], default='user', help_text='User role within the system.', max_length=20)),
                ('is_tenant_admin', models.BooleanField(default=False, help_text='Designates whether this user is a tenant administrator.')),
                ('phone_number', models.CharField(blank=True, help_text='User phone number.', max_length=20, null=True)),
                ('avatar', models.ImageField(blank=True, help_text='User profile picture.', null=True, upload_to='avatars/')),
                ('date_of_birth', models.DateField(blank=True, help_text='User date of birth.', null=True)),
                ('username', models.CharField(blank=True, help_text='Optional. 150 characters or fewer.', max_length=150, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='User biography.', max_length=500)),
                ('website', models.URLField(blank=True, help_text='User website URL.')),
                ('location', models.CharField(blank=True, help_text='User location.', max_length=100)),
                ('company', models.CharField(blank=True, help_text='User company.', max_length=100)),
                ('job_title', models.CharField(blank=True, help_text='User job title.', max_length=100)),
                ('preferences', models.JSONField(blank=True, default=dict, help_text='User preferences stored as JSON.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'accounts_user_profile',
            },
        ),
    ]
