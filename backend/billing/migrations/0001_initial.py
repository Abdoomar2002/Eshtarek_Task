# Generated by Django 4.2.7 on 2025-08-02 05:44

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('subscriptions', '0001_initial'),
        ('tenants', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(help_text='Unique invoice number.', max_length=50, unique=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('open', 'Open'), ('paid', 'Paid'), ('uncollectible', 'Uncollectible'), ('void', 'Void')], default='draft', help_text='Status of the invoice.', max_length=20)),
                ('subtotal', models.DecimalField(decimal_places=2, help_text='Subtotal amount.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Tax amount.', max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total amount including tax.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('currency', models.CharField(default='USD', help_text='Currency code for the invoice.', max_length=3)),
                ('issue_date', models.DateTimeField(help_text='When the invoice was issued.')),
                ('due_date', models.DateTimeField(help_text='When the invoice is due.')),
                ('paid_date', models.DateTimeField(blank=True, help_text='When the invoice was paid.', null=True)),
                ('billing_period_start', models.DateTimeField(help_text='Start of the billing period.')),
                ('billing_period_end', models.DateTimeField(help_text='End of the billing period.')),
                ('stripe_invoice_id', models.CharField(blank=True, help_text='Stripe invoice ID.', max_length=100)),
                ('stripe_payment_intent_id', models.CharField(blank=True, help_text='Stripe payment intent ID.', max_length=100)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata for the invoice.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscription', models.ForeignKey(help_text='Subscription this invoice is for.', on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='subscriptions.subscription')),
                ('tenant', models.ForeignKey(help_text='Tenant this invoice belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'invoice',
                'verbose_name_plural': 'invoices',
                'db_table': 'billing_invoice',
                'ordering': ['-issue_date'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(help_text='Description of the item.', max_length=255)),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Quantity of the item.')),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Unit price of the item.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_price', models.DecimalField(decimal_places=2, help_text='Total price for this item.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata for the item.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('invoice', models.ForeignKey(help_text='Invoice this item belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='billing.invoice')),
            ],
            options={
                'verbose_name': 'invoice item',
                'verbose_name_plural': 'invoice items',
                'db_table': 'billing_invoice_item',
            },
        ),
        migrations.CreateModel(
            name='BillingSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tax_rate', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Tax rate as a decimal (e.g., 0.0825 for 8.25%).', max_digits=5)),
                ('tax_number', models.CharField(blank=True, help_text='Tax identification number.', max_length=50)),
                ('auto_billing', models.BooleanField(default=True, help_text='Whether to automatically bill the tenant.')),
                ('grace_period_days', models.PositiveIntegerField(default=7, help_text='Number of days grace period before suspending service.')),
                ('default_payment_method', models.CharField(choices=[('card', 'Credit Card'), ('bank_transfer', 'Bank Transfer'), ('paypal', 'PayPal')], default='card', help_text='Default payment method.', max_length=20)),
                ('send_invoice_emails', models.BooleanField(default=True, help_text='Whether to send invoice emails.')),
                ('send_payment_reminders', models.BooleanField(default=True, help_text='Whether to send payment reminders.')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata for billing settings.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.OneToOneField(help_text='Tenant these settings belong to.', on_delete=django.db.models.deletion.CASCADE, related_name='billing_settings', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'billing settings',
                'verbose_name_plural': 'billing settings',
                'db_table': 'billing_billing_settings',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount of the payment.', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('currency', models.CharField(default='USD', help_text='Currency code for the payment.', max_length=3)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('succeeded', 'Succeeded'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', help_text='Status of the payment.', max_length=20)),
                ('payment_method', models.CharField(choices=[('card', 'Credit Card'), ('bank_transfer', 'Bank Transfer'), ('paypal', 'PayPal'), ('stripe', 'Stripe'), ('manual', 'Manual')], default='stripe', help_text='Method used for payment.', max_length=20)),
                ('processed_at', models.DateTimeField(blank=True, help_text='When the payment was processed.', null=True)),
                ('external_payment_id', models.CharField(blank=True, help_text='External payment provider ID.', max_length=100)),
                ('external_transaction_id', models.CharField(blank=True, help_text='External transaction ID.', max_length=100)),
                ('error_message', models.TextField(blank=True, help_text='Error message if payment failed.')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata for the payment.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('invoice', models.ForeignKey(help_text='Invoice this payment is for.', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='billing.invoice')),
            ],
            options={
                'verbose_name': 'payment',
                'verbose_name_plural': 'payments',
                'db_table': 'billing_payment',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['invoice'], name='billing_pay_invoice_147afb_idx'), models.Index(fields=['status'], name='billing_pay_status_b7739e_idx'), models.Index(fields=['payment_method'], name='billing_pay_payment_715e62_idx'), models.Index(fields=['external_payment_id'], name='billing_pay_externa_c262d0_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['tenant'], name='billing_inv_tenant__2244b8_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['subscription'], name='billing_inv_subscri_d72937_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['status'], name='billing_inv_status_541249_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['invoice_number'], name='billing_inv_invoice_70511c_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['due_date'], name='billing_inv_due_dat_e51895_idx'),
        ),
    ]
